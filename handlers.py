import io
import logging
from telegram import Update, constants
from telegram.ext import ContextTypes
from .state import (
    PROMPTS, HISTORIES, UNLIMITED_IDS, _save_state, _ensure_context, _truncate_history,
    _check_and_increment_usage, _check_and_increment_image_usage, _add_message_to_history,
    _reset_chat_history
)
from .config import UNLIMITED_IDS_PATH, MAX_QUESTION_LEN, USE_DATABASE, ADMIN_CHAT_IDS
from .yaclient import generate_reply, generate_image
from .db import update_chat_user_info, Session, add_usage_record, set_system_prompt

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∫–∏
from .admin_panel import admin_message_handler

async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    username = context.bot.username or "the bot"
    text = (
        "üëã <b>Hello!</b> I am an assistant powered by <b>YandexGPT 5 Pro</b>.\n\n"
        "<b>What I can do</b>:\n"
        "‚Ä¢ <code>/ask &lt;question&gt;</code> ‚Äî I will answer (up to 15 requests/day per chat).\n"
        "‚Ä¢ <code>/image &lt;description&gt;</code> ‚Äî I will generate an image from a description (up to 5 requests/day per chat).\n"
        "‚Ä¢ <code>/setprompt &lt;text&gt;</code> ‚Äî I will set a system prompt.\n"
        "‚Ä¢ <code>/reset</code> ‚Äî I will clear the history.\n\n"
        "Chats from the whitelist (<code>{path}</code>) have no limits.\n"
        "In groups, use <code>/ask@{username}</code>."
    ).format(path=UNLIMITED_IDS_PATH.name, username=username)

    await update.effective_message.reply_text(
        text,
        parse_mode=constants.ParseMode.HTML,
        disable_web_page_preview=True,
    )

async def ask_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    if USE_DATABASE:
        session = Session()
        chat = update.effective_chat
        username = getattr(chat, 'username', None)
        first_name = getattr(chat, 'first_name', None)
        title = getattr(chat, 'title', None)
        update_chat_user_info(session, chat_id, username=username, first_name=first_name, title=title)
    if not _check_and_increment_usage(chat_id):
        await update.effective_message.reply_text("üö´ The daily limit of 15 requests has been reached. Please try again tomorrow.")
        return
    question = " ".join(context.args).strip()
    if not question and update.message.reply_to_message:
        question = update.message.reply_to_message.text or ""
    if not question:
        await update.effective_message.reply_text("Usage: /ask <your question>")
        return
    if len(question) > MAX_QUESTION_LEN:
        await update.effective_message.reply_text("‚ö†Ô∏è The question is too long (max 4000 characters).")
        return
    history = _ensure_context(chat_id)
    if USE_DATABASE:
        _add_message_to_history(chat_id, "user", question)
    else:
        history.append({"role": "user", "text": question})
        _truncate_history(history)
    typing_task = context.application.create_task(update.effective_chat.send_chat_action("typing"))
    try:
        answer = await generate_reply(history)
        if USE_DATABASE:
            user = update.effective_user
            add_usage_record(session, chat_id, user_id=user.id, user_username=getattr(user, 'username', None), user_first_name=getattr(user, 'first_name', None))
    except Exception as exc:
        logging.exception("YandexGPT request failed")
        await update.effective_message.reply_text(f"‚ö†Ô∏è Error: {exc}")
        return
    finally:
        typing_task.cancel()
        if USE_DATABASE:
            session.close()
    if USE_DATABASE:
        _add_message_to_history(chat_id, "assistant", answer)
    else:
        history.append({"role": "assistant", "text": answer})
        _save_state()
    await update.effective_message.reply_text(answer, reply_to_message_id=update.message.message_id, parse_mode=None)

async def setprompt_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setprompt –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –ë–î
    if USE_DATABASE:
        session = Session()
        chat = update.effective_chat
        username = getattr(chat, 'username', None)
        first_name = getattr(chat, 'first_name', None)
        title = getattr(chat, 'title', None)
        update_chat_user_info(session, chat_id, username=username, first_name=first_name, title=title)
        session.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    is_unlimited = chat_id in UNLIMITED_IDS
    is_admin = user_id in ADMIN_CHAT_IDS
    if not (is_unlimited or is_admin):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ —á–∞—Ç—ã –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
    new_prompt = " ".join(context.args).strip()
    if not new_prompt:
        await update.effective_message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setprompt <—Ç–µ–∫—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞>")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ –ø–∞–º—è—Ç—å –¥–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ –ë–î
    PROMPTS[chat_id] = new_prompt

    try:
        logging.info(f"Setting system prompt for chat {chat_id}")
        
        # –°–±—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
        _reset_chat_history(chat_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–º–ø—Ç–æ–º
        if USE_DATABASE:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from yandexgpt_bot.db import set_system_prompt as db_set_prompt
            session = Session()
            db_set_prompt(session, chat_id, new_prompt)
            session.close()
        else:
            # –î–ª—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ –ë–î
            HISTORIES[chat_id] = [{"role": "system", "text": new_prompt}]
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–î
        _save_state()
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        _ensure_context(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await update.effective_message.reply_text("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω.")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
        await update.effective_message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    chat_id = update.effective_chat.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –ë–î
    if USE_DATABASE:
        session = Session()
        chat = update.effective_chat
        username = getattr(chat, 'username', None)
        first_name = getattr(chat, 'first_name', None)
        title = getattr(chat, 'title', None)
        update_chat_user_info(session, chat_id, username=username, first_name=first_name, title=title)
        session.close()
    
    try:
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        PROMPTS.pop(chat_id, None)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ë–î
        _reset_chat_history(chat_id)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–º–ø—Ç–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        _ensure_context(chat_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–î
        _save_state()
        
        await update.effective_message.reply_text("üóëÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        await update.effective_message.reply_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("Exception while handling an update:", exc_info=context.error)

async def image_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    description = " ".join(context.args).strip()
    if not description:
        await update.effective_message.reply_text("Usage: /image <description>")
        return
    chat_id = update.effective_chat.id
    if USE_DATABASE:
        session = Session()
        chat = update.effective_chat
        username = getattr(chat, 'username', None)
        first_name = getattr(chat, 'first_name', None)
        title = getattr(chat, 'title', None)
        update_chat_user_info(session, chat_id, username=username, first_name=first_name, title=title)
        user = update.effective_user
        add_usage_record(session, chat_id, user_id=user.id, user_username=getattr(user, 'username', None), user_first_name=getattr(user, 'first_name', None))
        session.close()
    if not _check_and_increment_image_usage(chat_id):
        await update.effective_message.reply_text("üö´ The daily image generation limit of 5 requests has been reached. Please try again tomorrow.")
        return
    typing_task = context.application.create_task(update.effective_chat.send_chat_action("upload_photo"))
    try:
        image_bytes = await generate_image(description)
    except Exception as exc:
        logging.exception("YandexART request failed")
        await update.effective_message.reply_text(f"‚ö†Ô∏è Error generating image: {exc}")
        return
    finally:
        typing_task.cancel()
    await update.effective_message.reply_photo(photo=io.BytesIO(image_bytes))

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –∞–¥–º–∏–Ω-—Å–æ–æ–±—â–µ–Ω–∏–µ
    if await admin_message_handler(update, context):
        return  # –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ –∞–¥–º–∏–Ω–∫–µ
    
    # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã /ask
    pass 