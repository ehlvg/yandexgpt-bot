"""
–ú–æ–¥—É–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –±–æ—Ç–∞ YandexGPT.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram.
"""
import os
import yaml
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
import datetime
import logging
from typing import List, Dict, Any, Optional
import matplotlib.pyplot as plt
import io
from sqlalchemy import func

from .config import ADMIN_CHAT_IDS, USE_DATABASE, CONFIG_PATH, LANGUAGE
from .state import UNLIMITED_IDS, _save_state, db_initialized
from .translations import get_text, get_current_language

# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ë–î, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
if USE_DATABASE and db_initialized:
    from .db import Session, get_or_create_chat, set_unlimited_status, Chat, UsageRecord, ImageUsageRecord, Message

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data
ADD_USER = 'add_user'
REMOVE_USER = 'remove_user'
LIST_USERS = 'list_users'
STATS = 'stats'
BACK = 'back'
CONFIRM_ADD = 'confirm_add'
CONFIRM_REMOVE = 'confirm_remove'
LANGUAGE_MENU = 'language_menu'
SET_LANGUAGE = 'set_language'
SELECT_REMOVE_USER = 'select_remove'

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–¥–º–∏–Ω–∫–µ
admin_states = {}
# –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
unlimited_users_cache = {}

async def is_admin(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ —á–∞—Ç–∞
    user_id = update.effective_user.id
    logging.info(f"Checking admin rights for user {user_id}, admins: {ADMIN_CHAT_IDS}")
    return user_id in ADMIN_CHAT_IDS

def get_main_admin_keyboard(lang=None):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if lang is None:
        lang = get_current_language()
    keyboard = [
        [
            InlineKeyboardButton(get_text("btn_unlimited_users", lang=lang), callback_data=LIST_USERS),
            InlineKeyboardButton(get_text("btn_statistics", lang=lang), callback_data=STATS)
        ],
        [
            InlineKeyboardButton(get_text("btn_add_user", lang=lang), callback_data=ADD_USER),
            InlineKeyboardButton(get_text("btn_remove_user", lang=lang), callback_data=REMOVE_USER)
        ],
        [
            InlineKeyboardButton(get_text("btn_language", lang=lang), callback_data=LANGUAGE_MENU)
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def admin_panel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not await is_admin(update):
        await update.message.reply_text(get_text("access_denied", lang=get_current_language()))
        return
    
    lang = get_current_language()
    await update.message.reply_text(
        f"üõ† *{get_text('admin_panel_title', lang=lang)}*\n\n"
        f"{get_text('admin_panel_welcome', lang=lang)}",
        reply_markup=get_main_admin_keyboard(lang=lang),
        parse_mode=constants.ParseMode.MARKDOWN
    )

async def admin_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    chat_id = update.effective_chat.id
    lang = get_current_language()
    
    if not await is_admin(update):
        await query.answer(get_text("access_denied", lang=lang))
        return
    
    await query.answer()
    
    data = query.data
    
    if data == BACK:
        admin_states.pop(chat_id, None)  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await query.edit_message_text(
            f"üõ† *{get_text('admin_panel_title', lang=lang)}*\n\n"
            f"{get_text('admin_panel_welcome', lang=lang)}",
            reply_markup=get_main_admin_keyboard(lang=lang),
            parse_mode=constants.ParseMode.MARKDOWN
        )
    
    elif data == LIST_USERS:
        await show_unlimited_users(update, context)
    
    elif data == STATS:
        await show_stats(update, context)
    
    elif data == ADD_USER:
        admin_states[chat_id] = {'action': ADD_USER}
        await query.edit_message_text(
            f"*{get_text('add_user_title', lang=lang)}*\n\n"
            f"{get_text('add_user_description', lang=lang)}\n\n"
            f"{get_text('add_user_share_contact', lang=lang)}",
            parse_mode=constants.ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back", lang=lang), callback_data=BACK)]])
        )
    
    elif data == REMOVE_USER:
        # –í–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ ID –Ω–∞–ø—Ä—è–º—É—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        await show_users_for_removal(update, context)
    
    elif data == LANGUAGE_MENU:
        await show_language_menu(update, context)
    
    elif data.startswith(SET_LANGUAGE):
        language = data.split(':')[1]
        await set_language(update, context, language)
    
    elif data.startswith(CONFIRM_ADD):
        user_id = int(data.split(':')[1])
        await add_unlimited_user(update, context, user_id)
    
    elif data.startswith(CONFIRM_REMOVE):
        user_id = int(data.split(':')[1])
        await remove_unlimited_user(update, context, user_id)
    
    elif data.startswith(SELECT_REMOVE_USER):
        user_id = int(data.split(':')[1])
        await query.edit_message_text(
            get_text("confirm_remove_user", user_id=user_id, lang=lang),
            parse_mode=constants.ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(get_text("btn_yes", lang=lang), callback_data=f"{CONFIRM_REMOVE}:{user_id}")],
                [InlineKeyboardButton(get_text("btn_no", lang=lang), callback_data=BACK)]
            ])
        )

async def admin_message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∫–∏
    """
    if not await is_admin(update):
        return False
    
    chat_id = update.effective_chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if update.message.contact and chat_id in admin_states and admin_states[chat_id].get('action') == ADD_USER:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        user_id = update.message.contact.user_id
        if not user_id:
            await update.message.reply_text(
                get_text("contact_no_userid", lang=get_current_language()),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back_to_admin", lang=get_current_language()), callback_data=BACK)]])
            )
            return True
            
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        await update.message.reply_text(
            get_text("confirm_add_user", user_id=user_id, lang=get_current_language()),
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(get_text("btn_yes", lang=get_current_language()), callback_data=f"{CONFIRM_ADD}:{user_id}")],
                [InlineKeyboardButton(get_text("btn_no", lang=get_current_language()), callback_data=BACK)]
            ])
        )
        return True
    
    if not update.message.text:
        return False
    
    message_text = update.message.text
    
    if chat_id not in admin_states:
        return False
    
    state = admin_states[chat_id]
    
    if state.get('action') == ADD_USER:
        try:
            user_id = int(message_text.strip())
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (—É–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î)
            await update.message.reply_text(
                get_text("confirm_add_user", user_id=user_id, lang=get_current_language()),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(get_text("btn_yes", lang=get_current_language()), callback_data=f"{CONFIRM_ADD}:{user_id}")],
                    [InlineKeyboardButton(get_text("btn_no", lang=get_current_language()), callback_data=BACK)]
                ])
            )
            return True
        except ValueError:
            await update.message.reply_text(
                get_text("invalid_id", lang=get_current_language()),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back_to_admin", lang=get_current_language()), callback_data=BACK)]])
            )
            return True
    
    elif state.get('action') == REMOVE_USER:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
            selection = int(message_text.strip())
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º
            unlimited_users = get_unlimited_users_list()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
            if selection < 1 or selection > len(unlimited_users):
                await update.message.reply_text(
                    get_text("invalid_selection", lang=get_current_language()),
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back_to_admin", lang=get_current_language()), callback_data=BACK)]])
                )
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É –≤ —Å–ø–∏—Å–∫–µ
            user_id = unlimited_users[selection - 1]
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            await update.message.reply_text(
                get_text("confirm_remove_user", user_id=user_id, lang=get_current_language()),
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(get_text("btn_yes", lang=get_current_language()), callback_data=f"{CONFIRM_REMOVE}:{user_id}")],
                    [InlineKeyboardButton(get_text("btn_no", lang=get_current_language()), callback_data=BACK)]
                ])
            )
            return True
        except ValueError:
            await update.message.reply_text(
                get_text("invalid_selection", lang=get_current_language()),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back_to_admin", lang=get_current_language()), callback_data=BACK)]])
            )
            return True
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text(
                get_text("general_error", error=str(e), lang=get_current_language()),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back_to_admin", lang=get_current_language()), callback_data=BACK)]])
            )
            return True
    
    return False

def get_unlimited_users_list() -> List[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º"""
    if USE_DATABASE and db_initialized:
        try:
            from .db import Session, Chat
            session = Session()
            chats = session.query(Chat).filter_by(is_unlimited=True).all()
            unlimited_users = [chat.chat_id for chat in chats]
            session.close()
            return sorted(unlimited_users)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return sorted(list(UNLIMITED_IDS))
    else:
        return sorted(list(UNLIMITED_IDS))

async def get_chat_username(bot, chat_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await bot.get_chat(chat_id)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º username, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ first_name –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ ID
        if chat.username:
            return f"@{chat.username}"
        elif chat.type == 'private' and chat.first_name:
            return f"{chat.first_name}"
        elif chat.title:  # –î–ª—è –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤
            return f"{chat.title}"
        else:
            return f"{chat_id}"
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {chat_id}: {e}")
        return f"{chat_id}"

async def show_unlimited_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –±–µ–∑–ª–∏–º–∏—Ç–æ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º username"""
    query = update.callback_query
    lang = get_current_language()
    unlimited_users = get_unlimited_users_list()
    
    if not unlimited_users:
        message = f"*{get_text('unlimited_users_title', lang=lang)}*\n\n{get_text('unlimited_users_empty', lang=lang)}"
        await query.edit_message_text(
            message,
            parse_mode=constants.ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back", lang=lang), callback_data=BACK)]])
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await query.edit_message_text(
        f"*{get_text('unlimited_users_title', lang=lang)}*\n\n{get_text('loading_users', lang=lang)}",
        parse_mode=constants.ParseMode.MARKDOWN
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö –∏–º–µ–Ω–∞–º–∏
    message = f"*{get_text('unlimited_users_title', lang=lang)}*\n\n"
    
    for idx, user_id in enumerate(unlimited_users, 1):
        username = await get_chat_username(context.bot, user_id)
        message += f"{idx}. {username} (`{user_id}`)\n"
    
    await query.edit_message_text(
        message,
        parse_mode=constants.ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back", lang=lang), callback_data=BACK)]])
    )

async def show_users_for_removal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    query = update.callback_query
    chat_id = update.effective_chat.id
    lang = get_current_language()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    admin_states[chat_id] = {'action': REMOVE_USER}
    
    unlimited_users = get_unlimited_users_list()
    
    if not unlimited_users:
        await query.edit_message_text(
            f"*{get_text('remove_user_title', lang=lang)}*\n\n{get_text('unlimited_users_empty', lang=lang)}",
            parse_mode=constants.ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back", lang=lang), callback_data=BACK)]])
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await query.edit_message_text(
        f"*{get_text('remove_user_title', lang=lang)}*\n\n{get_text('loading_users', lang=lang)}",
        parse_mode=constants.ParseMode.MARKDOWN
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    message = f"*{get_text('remove_user_title', lang=lang)}*\n\n"
    message += f"{get_text('remove_user_select', lang=lang)}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = []
    
    for idx, user_id in enumerate(unlimited_users, 1):
        username = await get_chat_username(context.bot, user_id)
        message += f"{idx}. {username} (`{user_id}`)\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard.append([InlineKeyboardButton(f"{idx}. {username}", callback_data=f"{SELECT_REMOVE_USER}:{user_id}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton(get_text("btn_back", lang=lang), callback_data=BACK)])
    
    await query.edit_message_text(
        message,
        parse_mode=constants.ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∏ –≥—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    lang = get_current_language()
    if USE_DATABASE and db_initialized:
        try:
            session = Session()
            total_chats = session.query(Chat).count()
            unlimited_chats = session.query(Chat).filter_by(is_unlimited=True).count()
            today = datetime.datetime.utcnow().date()
            today_start = datetime.datetime.combine(today, datetime.time.min)
            total_messages = session.query(Message).count()
            today_requests = session.query(UsageRecord).filter(UsageRecord.date >= today_start).count()
            today_images = session.query(ImageUsageRecord).filter(ImageUsageRecord.date >= today_start).count()
            
            # --- –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è–º (–∑–∞–ø—Ä–æ—Å—ã) ---
            last_24h = datetime.datetime.utcnow() - datetime.timedelta(hours=24)
            usage = session.query(UsageRecord).filter(UsageRecord.date >= last_24h).all()
            user_stats = {}
            for rec in usage:
                if rec.user_username:
                    label = f"@{rec.user_username}"
                elif rec.user_first_name:
                    label = rec.user_first_name
                elif rec.user_id:
                    label = str(rec.user_id)
                else:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_stats.setdefault(label, 0)
                user_stats[label] += rec.count
            sorted_stats = sorted(user_stats.items(), key=lambda x: x[1], reverse=True)
            
            if sorted_stats:
                labels, values = zip(*sorted_stats)
                plt.figure(figsize=(8, max(3, len(labels)*0.5)))
                plt.barh(labels, values, color='skyblue')
                plt.xlabel(get_text("chart_requests_x", default="Requests in 24h", lang=lang))
                plt.title(get_text("chart_requests_title", default="User activity over the last 24 hours", lang=lang))
                plt.tight_layout()
                buf = io.BytesIO()
                plt.savefig(buf, format='png')
                buf.seek(0)
                plt.close()
                await query.message.reply_photo(photo=buf, caption=get_text("chart_requests_24h", lang=lang))
            
            message = (
                f"*{get_text('stats_title', lang=lang)}*\n\n"
                f"{get_text('stats_total_chats', count=total_chats, lang=lang)}\n"
                f"{get_text('stats_unlimited_chats', count=unlimited_chats, lang=lang)}\n"
                f"{get_text('stats_total_messages', count=total_messages, lang=lang)}\n"
                f"{get_text('stats_today_requests', count=today_requests, lang=lang)}\n"
                f"{get_text('stats_today_images', count=today_images, lang=lang)}\n"
            )
            session.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            message = get_text("stats_error", error=str(e), lang=lang)
    else:
        message = (
            f"*{get_text('stats_title', lang=lang)}*\n\n"
            f"{get_text('stats_basic', count=len(UNLIMITED_IDS), lang=lang)}"
        )
    await query.edit_message_text(
        message,
        parse_mode=constants.ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back", lang=lang), callback_data=BACK)]])
    )

async def show_language_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    lang = get_current_language()
    message = (
        f"*{get_text('language_title', lang=lang)}*\n\n"
        f"{get_text('language_description', lang=lang)}"
    )
    
    keyboard = [
        [
            InlineKeyboardButton(get_text("btn_english", lang=lang), callback_data=f"{SET_LANGUAGE}:english"),
            InlineKeyboardButton(get_text("btn_russian", lang=lang), callback_data=f"{SET_LANGUAGE}:russian")
        ],
        [
            InlineKeyboardButton(get_text("btn_back", lang=lang), callback_data=BACK)
        ]
    ]
    
    await query.edit_message_text(
        message,
        parse_mode=constants.ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE, language: str) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    query = update.callback_query
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞
        config['language'] = language
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
            yaml.dump(config, f, default_flow_style=False, sort_keys=False, allow_unicode=True)
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        global LANGUAGE
        from .config import LANGUAGE as CONFIG_LANGUAGE
        LANGUAGE = language
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        language_text = "English" if language == "english" else "–†—É—Å—Å–∫–∏–π"
        await query.edit_message_text(
            f"‚úÖ {get_text('language_changed', lang=language)}",
            parse_mode=constants.ParseMode.MARKDOWN,
            reply_markup=get_main_admin_keyboard(lang=language)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —è–∑—ã–∫–∞: {e}")
        await query.edit_message_text(
            f"‚ö†Ô∏è Error changing language: {e}",
            parse_mode=constants.ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back", lang=get_current_language()), callback_data=BACK)]])
        )

async def add_unlimited_user(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö"""
    query = update.callback_query
    
    try:
        if USE_DATABASE and db_initialized:
            session = Session()
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º
                get_or_create_chat(session, user_id)
                set_unlimited_status(session, user_id, True)
                # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ UNLIMITED_IDS –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                UNLIMITED_IDS.add(user_id)
            finally:
                session.close()
        else:
            UNLIMITED_IDS.add(user_id)
            _save_state()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª unlimited_chats.txt
        from .config import UNLIMITED_IDS_PATH
        with open(UNLIMITED_IDS_PATH, 'a') as f:
            f.write(f"{user_id}\n")
        
        admin_states.pop(update.effective_chat.id, None)  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await query.edit_message_text(
            get_text("user_added", user_id=user_id, lang=get_current_language()),
            parse_mode=constants.ParseMode.MARKDOWN,
            reply_markup=get_main_admin_keyboard(lang=get_current_language())
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await query.edit_message_text(
            get_text("add_user_error", error=str(e), lang=get_current_language()),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back", lang=get_current_language()), callback_data=BACK)]])
        )

async def remove_unlimited_user(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö"""
    query = update.callback_query
    
    try:
        if USE_DATABASE and db_initialized:
            session = Session()
            try:
                set_unlimited_status(session, user_id, False)
                # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ UNLIMITED_IDS –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                UNLIMITED_IDS.discard(user_id)
            finally:
                session.close()
        else:
            UNLIMITED_IDS.discard(user_id)
            _save_state()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª unlimited_chats.txt
        from .config import UNLIMITED_IDS_PATH
        if UNLIMITED_IDS_PATH.exists():
            with open(UNLIMITED_IDS_PATH, 'r') as f:
                lines = [line.strip() for line in f if line.strip() and int(line.strip()) != user_id]
            
            with open(UNLIMITED_IDS_PATH, 'w') as f:
                f.write('\n'.join(lines) + ('\n' if lines else ''))
        
        admin_states.pop(update.effective_chat.id, None)  # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await query.edit_message_text(
            get_text("user_removed", user_id=user_id, lang=get_current_language()),
            parse_mode=constants.ParseMode.MARKDOWN,
            reply_markup=get_main_admin_keyboard(lang=get_current_language())
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await query.edit_message_text(
            get_text("remove_user_error", error=str(e), lang=get_current_language()),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(get_text("btn_back", lang=get_current_language()), callback_data=BACK)]])
        )

def register_admin_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    application.add_handler(CommandHandler("admin", admin_panel_cmd))
    application.add_handler(CallbackQueryHandler(admin_callback_handler)) 